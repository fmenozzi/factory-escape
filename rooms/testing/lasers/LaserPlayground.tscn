[gd_scene load_steps=15 format=2]

[ext_resource path="res://rooms/Room.tscn" type="PackedScene" id=1]
[ext_resource path="res://actors/enemies/laser/Laser.tscn" type="PackedScene" id=2]
[ext_resource path="res://rooms/testing/lasers/laser_playground.gd" type="Script" id=3]
[ext_resource path="res://actors/player/Player.tscn" type="PackedScene" id=4]

[sub_resource type="RectangleShape2D" id=1]
extents = Vector2( 160, 90 )

[sub_resource type="Shader" id=2]
code = "shader_type canvas_item;

// The color of the outer beam.
uniform vec4 outer_beam_color : hint_color = vec4(1.0, 0.0, 0.0, 1.0);

// The half-width of the outer beam in UV space.
uniform float outer_beam_half_width_uv : hint_range(0.0, 0.5) = 0.25;

// The color of the inner beam.
uniform vec4 inner_beam_color : hint_color = vec4(1.0);

// The half-width of the inner beam in UV space.
uniform float inner_beam_half_width_uv : hint_range(0.0, 0.5) = 0.15;

// Determine whether we're in the inner beam, outer beam, or neither, and return
// the corresponding color (or transparent if outside beam).
vec4 beam(float dist_to_center_line_y) {
    if (dist_to_center_line_y <= inner_beam_half_width_uv) {
        return inner_beam_color;
    } else if (dist_to_center_line_y <= outer_beam_half_width_uv) {
        return outer_beam_color;
    } else {
        return vec4(0.0);
    }
}

void fragment() {
    // The y-coordinate of the pixel in UV-space. We don't care about the
    // x-coordinate, since the shader is uniform across all x-values.
    float y = UV.y;

    // The y-distance in UV-space from the current fragment to the horizontal
    // center line. This will be used to determine if the current fragment is
    // inside the beam.
    float dist_to_center_line_y = abs(0.5 - y);

    // Fragment color is just the color of the beam.
    COLOR = beam(dist_to_center_line_y);
}"

[sub_resource type="ShaderMaterial" id=3]
shader = SubResource( 2 )
shader_param/outer_beam_color = Color( 1, 0.309804, 0.470588, 1 )
shader_param/outer_beam_half_width_uv = 0.3125
shader_param/inner_beam_color = Color( 1, 1, 1, 1 )
shader_param/inner_beam_half_width_uv = 0.15625

[sub_resource type="RectangleShape2D" id=4]
extents = Vector2( 8, 5 )

[sub_resource type="Shader" id=5]
code = "shader_type canvas_item;

// The color of the outer beam.
uniform vec4 outer_beam_color : hint_color = vec4(1.0, 0.0, 0.0, 1.0);

// The half-width of the outer beam in UV space.
uniform float outer_beam_half_width_uv : hint_range(0.0, 0.5) = 0.25;

// The color of the inner beam.
uniform vec4 inner_beam_color : hint_color = vec4(1.0);

// The half-width of the inner beam in UV space.
uniform float inner_beam_half_width_uv : hint_range(0.0, 0.5) = 0.15;

// Determine whether we're in the inner beam, outer beam, or neither, and return
// the corresponding color (or transparent if outside beam).
vec4 beam(float dist_to_center_line_y) {
    if (dist_to_center_line_y <= inner_beam_half_width_uv) {
        return inner_beam_color;
    } else if (dist_to_center_line_y <= outer_beam_half_width_uv) {
        return outer_beam_color;
    } else {
        return vec4(0.0);
    }
}

void fragment() {
    // The y-coordinate of the pixel in UV-space. We don't care about the
    // x-coordinate, since the shader is uniform across all x-values.
    float y = UV.y;

    // The y-distance in UV-space from the current fragment to the horizontal
    // center line. This will be used to determine if the current fragment is
    // inside the beam.
    float dist_to_center_line_y = abs(0.5 - y);

    // Fragment color is just the color of the beam.
    COLOR = beam(dist_to_center_line_y);
}"

[sub_resource type="ShaderMaterial" id=6]
shader = SubResource( 5 )
shader_param/outer_beam_color = Color( 1, 0.309804, 0.470588, 1 )
shader_param/outer_beam_half_width_uv = 0.1875
shader_param/inner_beam_color = Color( 1, 1, 1, 1 )
shader_param/inner_beam_half_width_uv = 0.0625

[sub_resource type="RectangleShape2D" id=7]
extents = Vector2( 56, 3 )

[sub_resource type="Shader" id=8]
code = "shader_type canvas_item;

// The color of the outer beam.
uniform vec4 outer_beam_color : hint_color = vec4(1.0, 0.0, 0.0, 1.0);

// The half-width of the outer beam in UV space.
uniform float outer_beam_half_width_uv : hint_range(0.0, 0.5) = 0.25;

// The color of the inner beam.
uniform vec4 inner_beam_color : hint_color = vec4(1.0);

// The half-width of the inner beam in UV space.
uniform float inner_beam_half_width_uv : hint_range(0.0, 0.5) = 0.15;

// Determine whether we're in the inner beam, outer beam, or neither, and return
// the corresponding color (or transparent if outside beam).
vec4 beam(float dist_to_center_line_y) {
    if (dist_to_center_line_y <= inner_beam_half_width_uv) {
        return inner_beam_color;
    } else if (dist_to_center_line_y <= outer_beam_half_width_uv) {
        return outer_beam_color;
    } else {
        return vec4(0.0);
    }
}

void fragment() {
    // The y-coordinate of the pixel in UV-space. We don't care about the
    // x-coordinate, since the shader is uniform across all x-values.
    float y = UV.y;

    // The y-distance in UV-space from the current fragment to the horizontal
    // center line. This will be used to determine if the current fragment is
    // inside the beam.
    float dist_to_center_line_y = abs(0.5 - y);

    // Fragment color is just the color of the beam.
    COLOR = beam(dist_to_center_line_y);
}"

[sub_resource type="ShaderMaterial" id=9]
shader = SubResource( 8 )
shader_param/outer_beam_color = Color( 1, 0.309804, 0.470588, 1 )
shader_param/outer_beam_half_width_uv = 0.5
shader_param/inner_beam_color = Color( 1, 1, 1, 1 )
shader_param/inner_beam_half_width_uv = 0.09375

[sub_resource type="RectangleShape2D" id=10]
extents = Vector2( 29.1204, 8 )

[node name="LaserPlayground" instance=ExtResource( 1 )]
script = ExtResource( 3 )

[node name="Platforms" parent="TileMaps" index="2"]
tile_data = PoolIntArray( -1, 28, 0, -65536, 28, 0, -65535, 28, 0, -65534, 28, 0, -65533, 28, 0, -65532, 28, 0, -65531, 28, 0, -65530, 28, 0, -65529, 28, 0, -65528, 28, 0, -65527, 28, 0, -65526, 28, 0, -65525, 28, 0, -65524, 28, 0, -65523, 28, 0, -65522, 28, 0, -65521, 28, 0, -65520, 28, 0, -65519, 28, 0, -65518, 28, 0, -65517, 28, 0, -65516, 28, 0, 65535, 28, 0, 0, 28, 0, 1, 28, 0, 2, 28, 0, 3, 28, 0, 4, 28, 0, 5, 28, 0, 6, 28, 0, 7, 28, 0, 8, 28, 0, 9, 28, 0, 10, 28, 0, 11, 28, 0, 12, 28, 0, 13, 28, 0, 14, 28, 0, 15, 28, 0, 16, 28, 0, 17, 28, 0, 18, 28, 0, 19, 28, 0, 20, 28, 0, 131071, 28, 0, 65536, 28, 0, 65555, 28, 0, 65556, 28, 0, 196607, 28, 0, 131072, 28, 0, 131091, 28, 0, 131092, 28, 0, 262143, 28, 0, 196608, 28, 0, 196611, 18, 0, 196612, 18, 0, 196613, 18, 0, 196622, 18, 0, 196623, 18, 0, 196624, 18, 0, 196627, 28, 0, 196628, 28, 0, 327679, 28, 0, 262144, 28, 0, 262163, 28, 0, 262164, 28, 0, 393215, 28, 0, 327680, 28, 0, 327699, 28, 0, 327700, 28, 0, 458751, 28, 0, 393216, 28, 0, 393224, 28, 0, 393225, 28, 0, 393226, 28, 0, 393227, 28, 0, 393235, 28, 0, 393236, 28, 0, 524287, 28, 0, 458752, 28, 0, 458760, 28, 0, 458761, 28, 0, 458762, 28, 0, 458763, 28, 0, 458771, 28, 0, 458772, 28, 0, 589823, 28, 0, 524288, 28, 0, 524296, 28, 0, 524297, 28, 0, 524298, 28, 0, 524299, 28, 0, 524307, 28, 0, 524308, 28, 0, 655359, 28, 0, 589824, 28, 0, 589832, 28, 0, 589833, 28, 0, 589834, 28, 0, 589835, 28, 0, 589843, 28, 0, 589844, 28, 0, 720895, 28, 0, 655360, 28, 0, 655361, 28, 0, 655362, 28, 0, 655363, 28, 0, 655364, 28, 0, 655365, 28, 0, 655366, 28, 0, 655367, 28, 0, 655368, 28, 0, 655369, 28, 0, 655370, 28, 0, 655371, 28, 0, 655372, 28, 0, 655373, 28, 0, 655374, 28, 0, 655375, 28, 0, 655376, 28, 0, 655377, 28, 0, 655378, 28, 0, 655379, 28, 0, 655380, 28, 0, 786431, 28, 0, 720896, 28, 0, 720897, 28, 0, 720898, 28, 0, 720899, 28, 0, 720900, 28, 0, 720901, 28, 0, 720902, 28, 0, 720903, 28, 0, 720904, 28, 0, 720905, 28, 0, 720906, 28, 0, 720907, 28, 0, 720908, 28, 0, 720909, 28, 0, 720910, 28, 0, 720911, 28, 0, 720912, 28, 0, 720913, 28, 0, 720914, 28, 0, 720915, 28, 0, 720916, 28, 0, 851967, 28, 0, 786432, 28, 0, 786433, 28, 0, 786434, 28, 0, 786435, 28, 0, 786436, 28, 0, 786437, 28, 0, 786438, 28, 0, 786439, 28, 0, 786440, 28, 0, 786441, 28, 0, 786442, 28, 0, 786443, 28, 0, 786444, 28, 0, 786445, 28, 0, 786446, 28, 0, 786447, 28, 0, 786448, 28, 0, 786449, 28, 0, 786450, 28, 0, 786451, 28, 0, 786452, 28, 0 )

[node name="RoomBoundaries" parent="." index="1"]
visible = false

[node name="CollisionShape2D" parent="RoomBoundaries" index="0"]
position = Vector2( 160, 90 )
shape = SubResource( 1 )

[node name="Laser" parent="Enemies" index="0" instance=ExtResource( 2 )]
position = Vector2( 64, 32 )
outer_beam_width = 10.0
inner_beam_width = 5.0

[node name="Beam" parent="Enemies/Laser" index="0"]
material = SubResource( 3 )

[node name="CollisionShape2D" parent="Enemies/Laser/Hitbox" index="0"]
position = Vector2( 0, 8 )
rotation = 1.5708
shape = SubResource( 4 )

[node name="Laser2" parent="Enemies" index="1" instance=ExtResource( 2 )]
position = Vector2( 16, 128 )
outer_beam_width = 6.0
inner_beam_width = 2.0

[node name="Beam" parent="Enemies/Laser2" index="0"]
material = SubResource( 6 )

[node name="Offset" parent="Enemies/Laser2" index="1"]
position = Vector2( 1, 0 )

[node name="RayCast2D" parent="Enemies/Laser2/Offset" index="0"]
cast_to = Vector2( 232, 0 )

[node name="Target" parent="Enemies/Laser2" index="2"]
position = Vector2( 232, 0 )

[node name="CollisionShape2D" parent="Enemies/Laser2/Hitbox" index="0"]
position = Vector2( 56, 0 )
shape = SubResource( 7 )

[node name="Laser3" parent="Enemies" index="2" instance=ExtResource( 2 )]
position = Vector2( 128, 64 )
outer_beam_width = 16.0
inner_beam_width = 3.0

[node name="Beam" parent="Enemies/Laser3" index="0"]
material = SubResource( 9 )

[node name="RayCast2D" parent="Enemies/Laser3/Offset" index="0"]
cast_to = Vector2( 56, 16 )

[node name="Target" parent="Enemies/Laser3" index="2"]
position = Vector2( 56, 16 )

[node name="CollisionShape2D" parent="Enemies/Laser3/Hitbox" index="0"]
position = Vector2( 28, 8 )
rotation = 0.2783
shape = SubResource( 10 )

[node name="Player" parent="." index="9" instance=ExtResource( 4 )]
position = Vector2( 248, 160 )
starting_room_path = NodePath("..")

[editable path="TileMaps"]

[editable path="Enemies/Laser"]

[editable path="Enemies/Laser2"]

[editable path="Enemies/Laser3"]
